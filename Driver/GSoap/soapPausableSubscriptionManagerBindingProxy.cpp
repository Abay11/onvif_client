/* soapPausableSubscriptionManagerBindingProxy.cpp
   Generated by gSOAP 2.8.95 for .\onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapPausableSubscriptionManagerBindingProxy.h"

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	PausableSubscriptionManagerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(const PausableSubscriptionManagerBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	PausableSubscriptionManagerBindingProxy_init(_soap->imode, _soap->omode);
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	PausableSubscriptionManagerBindingProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	PausableSubscriptionManagerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PausableSubscriptionManagerBindingProxy_init(iomode, iomode);
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	PausableSubscriptionManagerBindingProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	PausableSubscriptionManagerBindingProxy_init(imode, omode);
}

PausableSubscriptionManagerBindingProxy::~PausableSubscriptionManagerBindingProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void PausableSubscriptionManagerBindingProxy::PausableSubscriptionManagerBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL },
        { "wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL },
        { "wsdd", "http://docs.oasis-open.org/ws-dd/ns/discovery/2009/01", NULL, NULL },
        { "c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL },
        { "ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL },
        { "saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL },
        { "saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL },
        { "wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL },
        { "xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL },
        { "wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL },
        { "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL },
        { "xmime", "http://www.w3.org/2005/05/xmlmime", NULL, NULL },
        { "ns1", "http://www.w3.org/2004/08/xop/include", NULL, NULL },
        { "tt", "http://www.onvif.org/ver10/schema", NULL, NULL },
        { "wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL },
        { "wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL },
        { "wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL },
        { "name", "http://www.onvif.org/ver10/events/wsdl/PullPointSubscriptionBinding", NULL, NULL },
        { "name2", "http://www.onvif.org/ver10/events/wsdl/EventBinding", NULL, NULL },
        { "tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL },
        { "name3", "http://www.onvif.org/ver10/events/wsdl/SubscriptionManagerBinding", NULL, NULL },
        { "name4", "http://www.onvif.org/ver10/events/wsdl/NotificationProducerBinding", NULL, NULL },
        { "name5", "http://www.onvif.org/ver10/events/wsdl/NotificationConsumerBinding", NULL, NULL },
        { "name6", "http://www.onvif.org/ver10/events/wsdl/PullPointBinding", NULL, NULL },
        { "name7", "http://www.onvif.org/ver10/events/wsdl/CreatePullPointBinding", NULL, NULL },
        { "name8", "http://www.onvif.org/ver10/events/wsdl/PausableSubscriptionManagerBinding", NULL, NULL },
        { "wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL },
        { "tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL },
        { "tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL },
        { "trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL },
        { "trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL },
        { "trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL },
        { "trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL },
        { "tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

PausableSubscriptionManagerBindingProxy *PausableSubscriptionManagerBindingProxy::copy()
{	PausableSubscriptionManagerBindingProxy *dup = SOAP_NEW_UNMANAGED(PausableSubscriptionManagerBindingProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

PausableSubscriptionManagerBindingProxy& PausableSubscriptionManagerBindingProxy::operator=(const PausableSubscriptionManagerBindingProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void PausableSubscriptionManagerBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void PausableSubscriptionManagerBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	PausableSubscriptionManagerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void PausableSubscriptionManagerBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

void PausableSubscriptionManagerBindingProxy::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence, struct _wsse__Security *wsse__Security)
{
	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
	this->soap->header->wsse__Security = wsse__Security;
}

::SOAP_ENV__Header *PausableSubscriptionManagerBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *PausableSubscriptionManagerBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *PausableSubscriptionManagerBindingProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *PausableSubscriptionManagerBindingProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *PausableSubscriptionManagerBindingProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int PausableSubscriptionManagerBindingProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int PausableSubscriptionManagerBindingProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void PausableSubscriptionManagerBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void PausableSubscriptionManagerBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *PausableSubscriptionManagerBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int PausableSubscriptionManagerBindingProxy::send_Renew(const char *soap_endpoint_url, const char *soap_action, _wsnt__Renew *wsnt__Renew)
{
	struct __name8__Renew soap_tmp___name8__Renew;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/RenewRequest";
	soap_tmp___name8__Renew.wsnt__Renew = wsnt__Renew;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name8__Renew(soap, &soap_tmp___name8__Renew);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name8__Renew(soap, &soap_tmp___name8__Renew, "-name8:Renew", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name8__Renew(soap, &soap_tmp___name8__Renew, "-name8:Renew", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int PausableSubscriptionManagerBindingProxy::recv_Renew(_wsnt__RenewResponse &wsnt__RenewResponse)
{
	wsnt__RenewResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__RenewResponse.soap_get(soap, "wsnt:RenewResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PausableSubscriptionManagerBindingProxy::send_Unsubscribe(const char *soap_endpoint_url, const char *soap_action, _wsnt__Unsubscribe *wsnt__Unsubscribe)
{
	struct __name8__Unsubscribe soap_tmp___name8__Unsubscribe;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/UnsubscribeRequest";
	soap_tmp___name8__Unsubscribe.wsnt__Unsubscribe = wsnt__Unsubscribe;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name8__Unsubscribe(soap, &soap_tmp___name8__Unsubscribe);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name8__Unsubscribe(soap, &soap_tmp___name8__Unsubscribe, "-name8:Unsubscribe", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name8__Unsubscribe(soap, &soap_tmp___name8__Unsubscribe, "-name8:Unsubscribe", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int PausableSubscriptionManagerBindingProxy::recv_Unsubscribe(_wsnt__UnsubscribeResponse &wsnt__UnsubscribeResponse)
{
	wsnt__UnsubscribeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__UnsubscribeResponse.soap_get(soap, "wsnt:UnsubscribeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PausableSubscriptionManagerBindingProxy::send_PauseSubscription(const char *soap_endpoint_url, const char *soap_action, _wsnt__PauseSubscription *wsnt__PauseSubscription)
{
	struct __name8__PauseSubscription soap_tmp___name8__PauseSubscription;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/PauseSubscriptionRequest";
	soap_tmp___name8__PauseSubscription.wsnt__PauseSubscription = wsnt__PauseSubscription;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name8__PauseSubscription(soap, &soap_tmp___name8__PauseSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name8__PauseSubscription(soap, &soap_tmp___name8__PauseSubscription, "-name8:PauseSubscription", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name8__PauseSubscription(soap, &soap_tmp___name8__PauseSubscription, "-name8:PauseSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int PausableSubscriptionManagerBindingProxy::recv_PauseSubscription(_wsnt__PauseSubscriptionResponse &wsnt__PauseSubscriptionResponse)
{
	wsnt__PauseSubscriptionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__PauseSubscriptionResponse.soap_get(soap, "wsnt:PauseSubscriptionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PausableSubscriptionManagerBindingProxy::send_ResumeSubscription(const char *soap_endpoint_url, const char *soap_action, _wsnt__ResumeSubscription *wsnt__ResumeSubscription)
{
	struct __name8__ResumeSubscription soap_tmp___name8__ResumeSubscription;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_action == NULL)
		soap_action = "http://docs.oasis-open.org/wsn/bw-2/PausableSubscriptionManager/ResumeSubscriptionRequest";
	soap_tmp___name8__ResumeSubscription.wsnt__ResumeSubscription = wsnt__ResumeSubscription;
	soap_begin(soap);
	soap_set_version(soap, 2); /* use SOAP1.2 */
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___name8__ResumeSubscription(soap, &soap_tmp___name8__ResumeSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___name8__ResumeSubscription(soap, &soap_tmp___name8__ResumeSubscription, "-name8:ResumeSubscription", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___name8__ResumeSubscription(soap, &soap_tmp___name8__ResumeSubscription, "-name8:ResumeSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int PausableSubscriptionManagerBindingProxy::recv_ResumeSubscription(_wsnt__ResumeSubscriptionResponse &wsnt__ResumeSubscriptionResponse)
{
	wsnt__ResumeSubscriptionResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wsnt__ResumeSubscriptionResponse.soap_get(soap, "wsnt:ResumeSubscriptionResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
